type UserProduct = record {
  category : SlugId__1;
  description : text;
  inventory : nat8;
  price : float64;
  status : variant {
    active;
    paused;
  };
  title : text;
};
type UpdateProductError = variant {
  EmptyTitle;
  ProductNotFound;
  UserNotAuthenticated;
};
type UpdateCategoryError = variant {
  CategoryNotFound;
  EmptyName;
  UserNotAuthenticated;
};
type Time = int;
type SlugId__1 = text;
type SlugId = text;
type ShippingAddress = record {
  city : text;
  country : text;
  county : text;
  firstName : text;
  lastName : text;
  mail : text;
  postCode : text;
  street : text;
};
type Result_9 = variant {
  err : CreateProductError;
  ok;
};
type Result_8 = variant {
  err : DeleteCategoryError;
  ok;
};
type Result_7 = variant {
  err : DeleteProductError;
  ok;
};
type Result_6 = variant {
  err : GetDerivationError;
  ok : text;
};
type Result_5 = variant {
  err : GetCategoryError;
  ok : Category;
};
type Result_4 = variant {
  err : GetProductError;
  ok : Product;
};
type Result_3 = variant {
  err : NoOpError;
  ok;
};
type Result_2 = variant {
  err : GetParseError;
  ok;
};
type Result_12 = variant {
  err : OrderError;
  ok : OrderStatus__1;
};
type Result_11 = variant {
  err : OrderError;
  ok : Order;
};
type Result_10 = variant {
  err : CreateCategoryError;
  ok;
};
type Result_1 = variant {
  err : UpdateCategoryError;
  ok;
};
type Result = variant {
  err : UpdateProductError;
  ok;
};
type ProductId = nat;
type Product = record {
  category : SlugId__1;
  description : text;
  id : ProductId;
  img : blob;
  inventory : nat8;
  price : float64;
  slug : text;
  status : variant {
    active;
    paused;
  };
  time_created : Time;
  time_updated : Time;
  title : text;
};
type OrderStatus__1 = variant {
  TransactionConfirmed;
  UserConfirmedPayment;
};
type OrderStatus = variant {
  TransactionConfirmed;
  UserConfirmedPayment;
};
type OrderProduct = record {
  id : ProductId;
  quantity : nat8;
};
type OrderId = nat;
type OrderError = variant {
  MissingData;
  OrderNotFound;
  PaymentAddressAlreadyUsed;
  UnableToCreate;
};
type Order = record {
  id : OrderId;
  paymentAddress : text;
  products : vec OrderProduct;
  shippingAddress : ShippingAddress;
  status : OrderStatus;
  timeCreated : Time;
  totalPrice : float64;
};
type NoOpError = variant { NoOpError };
type NewOrder = record {
  paymentAddress : text;
  products : vec OrderProduct;
  shippingAddress : ShippingAddress;
  totalPrice : float64;
};
type GetProductError = variant { ProductNotFound };
type GetParseError = variant { Base58PubKeyWrongFormatError };
type GetDerivationError = variant {
  Base58PubKeyWrongFormatError;
  ChildKeyDerivationError;
  OwnerExtendedPubKeyNotSet;
};
type GetCategoryError = variant { CategoryNotFound };
type DeleteProductError = variant { UserNotAuthenticated };
type DeleteCategoryError = variant { UserNotAuthenticated };
type CreateProductError = variant {
  EmptyTitle;
  UserNotAuthenticated;
};
type CreateCategoryError = variant {
  CategoryAlreadyExists;
  EmptyName;
  UserNotAuthenticated;
};
type Category = record {
  name : text;
  slug : text;
};
service : {
  checkOrderStatus : (nat) -> (Result_12) query;
  createOrder : (NewOrder) -> (Result_11);
  create_category : (text) -> (Result_10);
  create_product : (UserProduct) -> (Result_9);
  deleteOwnerXPUB : () -> () oneway;
  delete_category : (SlugId) -> (Result_8);
  delete_product : (SlugId) -> (Result_7);
  generateNextPaymentAddress : () -> (Result_6);
  getOwnerXPUB : () -> (text) query;
  get_category : (SlugId) -> (Result_5) query;
  get_product : (SlugId) -> (Result_4) query;
  list_categories : () -> (
    vec record {
      SlugId;
      Category;
    }
  ) query;
  list_products : () -> (
    vec record {
      SlugId;
      Product;
    }
  ) query;
  noOp : () -> (Result_3);
  setOwnerXPUB : (text) -> (Result_2);
  update_category : (SlugId, text) -> (Result_1);
  update_product : (SlugId, UserProduct) -> (Result);
};
