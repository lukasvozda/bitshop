type XPUBManipulationError = variant { UserNotAuthenticated };
type UserProduct = record {
  active : bool;
  category : SlugId__1;
  description : text;
  inventory : nat8;
  price : float64;
  title : text;
};
type UpdateProductError = variant {
  EmptyTitle;
  ProductNotFound;
  UserNotAuthenticated;
};
type UpdateCategoryError = variant {
  CategoryNotFound;
  EmptyName;
  UserNotAuthenticated;
};
type Time = int;
type StreamingStrategy = variant {
  Callback : record {
    callback : StreamingCallback;
    token : StreamingCallbackToken;
  };
};
type StreamingCallbackToken = record {
  content_encoding : text;
  index : nat;
  key : text;
};
type StreamingCallbackResponse = record {
  body : blob;
  token : opt StreamingCallbackToken;
};
type StreamingCallback = func(StreamingCallbackToken) -> (StreamingCallbackResponse) query;
type SlugId__1 = text;
type SlugId = text;
type ShippingAddress = record {
  city : text;
  country : text;
  county : text;
  firstName : text;
  lastName : text;
  mail : text;
  postCode : text;
  street : text;
};
type Satoshi = nat64;
type Result_9 = variant {
  err : GetDerivationError;
  ok : text;
};
type Result_8 = variant {
  err : XPUBManipulationError;
  ok : PanelInfo;
};
type Result_7 = variant {
  err : GetCategoryError;
  ok : Category;
};
type Result_6 = variant {
  err : OrderError;
  ok : Order;
};
type Result_5 = variant {
  err : XPUBManipulationError;
  ok : text;
};
type Result_4 = variant {
  err : GetProductError;
  ok : Product;
};
type Result_3 = variant {
  err : GetParseError;
  ok;
};
type Result_2 = variant {
  err : OrderError;
  ok : OrderId;
};
type Result_15 = variant {
  err : OrderError;
  ok : OrderStatus__1;
};
type Result_14 = variant {
  err : CreateCategoryError;
  ok : Category;
};
type Result_13 = variant {
  err : CreateProductError;
  ok : Product;
};
type Result_12 = variant {
  err : DeleteCategoryError;
  ok;
};
type Result_11 = variant {
  err : XPUBManipulationError;
  ok;
};
type Result_10 = variant {
  err : DeleteProductError;
  ok;
};
type Result_1 = variant {
  err : UpdateCategoryError;
  ok : Category;
};
type Result = variant {
  err : UpdateProductError;
  ok : Product;
};
type Response = record {
  body : blob;
  headers : vec HeaderField;
  status_code : nat16;
  streaming_strategy : opt StreamingStrategy;
};
type Request = record {
  body : blob;
  headers : vec HeaderField;
  method : text;
  url : text;
};
type ProductId = nat;
type Product = record {
  active : bool;
  category : SlugId__1;
  description : text;
  id : ProductId;
  img : ImgId__1;
  inventory : nat8;
  price : float64;
  slug : text;
  time_created : Time;
  time_updated : Time;
  title : text;
};
type PanelInfo = record {
  accountBalance : Satoshi;
  ordersCount : nat;
  totalRevenue : Satoshi;
};
type OrderStatus__1 = variant {
  TransactionIdSet;
  UserConfirmedPayment;
  Verified;
};
type OrderStatus = variant {
  TransactionIdSet;
  UserConfirmedPayment;
  Verified;
};
type OrderProduct = record {
  id : ProductId;
  quantity : nat8;
};
type OrderId__1 = text;
type OrderId = text;
type OrderError = variant {
  MissingData;
  OrderNotFound;
  PaymentAddressAlreadyUsed;
  UnableToCreate;
  UnableToUpdate;
};
type Order = record {
  id : OrderId__1;
  paymentAddress : text;
  products : vec OrderProduct;
  shippingAddress : ShippingAddress;
  status : OrderStatus;
  timeCreated : Time;
  totalPrice : Satoshi;
  transactionId : text;
};
type NewOrder = record {
  paymentAddress : text;
  products : vec OrderProduct;
  shippingAddress : ShippingAddress;
  totalPrice : Satoshi;
};
type ImgId__1 = text;
type ImgId = text;
type HeaderField = record {
  text;
  text;
};
type GetProductError = variant { ProductNotFound };
type GetParseError = variant {
  Base58PubKeyWrongFormatError;
  UserNotAuthenticated;
};
type GetDerivationError = variant {
  Base58PubKeyWrongFormatError;
  ChildKeyDerivationError;
  OwnerExtendedPubKeyNotSet;
};
type GetCategoryError = variant { CategoryNotFound };
type DeleteProductError = variant { UserNotAuthenticated };
type DeleteCategoryError = variant { UserNotAuthenticated };
type CreateProductError = variant {
  EmptyTitle;
  UserNotAuthenticated;
};
type CreateCategoryError = variant {
  CategoryAlreadyExists;
  EmptyName;
  UserNotAuthenticated;
};
type Category = record {
  name : text;
  slug : text;
};
service : {
  checkOrderStatus : (text) -> (Result_15);
  createCategory : (text) -> (Result_14);
  createOrder : (NewOrder) -> (Result_6);
  createProduct : (UserProduct, opt blob) -> (Result_13);
  deleteCategory : (SlugId) -> (Result_12);
  deleteOwnerXPUB : () -> (Result_11);
  deleteProduct : (SlugId) -> (Result_10);
  generateNextPaymentAddress : () -> (Result_9);
  getAdminPanelInfo : () -> (Result_8);
  getCategory : (SlugId) -> (Result_7) query;
  getOrder : (text) -> (Result_6) query;
  getOwnerXPUB : () -> (Result_5);
  getPic : (ImgId) -> (blob) query;
  getProduct : (SlugId) -> (Result_4) query;
  greet : (text) -> (text) query;
  http_request : (Request) -> (Response) query;
  listCategories : () -> (
    vec record {
      SlugId;
      Category;
    }
  ) query;
  listOrders : () -> (
    vec record {
      OrderId;
      Order;
    }
  ) query;
  listProducts : () -> (
    vec record {
      SlugId;
      Product;
    }
  ) query;
  setOwnerXPUB : (text) -> (Result_3);
  setUserInputTransactionId : (text, text) -> (Result_2);
  updateCategory : (SlugId, text) -> (Result_1);
  updateProduct : (SlugId, UserProduct, opt blob) -> (Result);
  uploadImg : (ImgId, blob) -> () oneway;
};
